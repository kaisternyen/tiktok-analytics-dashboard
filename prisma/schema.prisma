generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id                String           @id @default(cuid())
  url               String           @unique
  videoId           String?          // Platform-specific video ID
  username          String
  description       String
  thumbnailUrl      String?
  currentViews      Int              @default(0)
  currentLikes      Int              @default(0)
  currentComments   Int              @default(0)
  currentShares     Int              @default(0)
  hashtags          String?
  music             String?
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  lastScrapedAt     DateTime         @default(now())
  postedAt          DateTime?        // When the video was originally posted to platform
  platform          String           @default("tiktok")
  lastDailyViews    Int?
  scrapingCadence   String           @default("hourly")
  dailyViewsGrowth  Int?
  needsCadenceCheck Boolean          @default(false)
  lastModeChange    DateTime?
  trackingMode      String?
  phase1Notified    Boolean          @default(false)  // >5k views + >5 comments
  phase2Notified    Boolean          @default(false)  // >10k views in hour + exponential
  currentPhase      String           @default("PHS 0") // PHS 0, In PHS 1, PHS 1 Complete, In PHS 2, PHS 2 Complete
  
  // Comment moderation tracking
  lastModeratedAt   DateTime?        // When "Just Moderated" was last clicked
  moderatedBy       String?          // Who moderated it (username/identifier)
  threadsPlanted    Int              @default(0)      // Number of comment threads started
  gotTopComment     Boolean          @default(false)  // Star checkbox for top comment achievement
  totalCommentsModerated Int         @default(0)      // Total comments moderated across all sessions
  threadsJustModerated Int           @default(0)      // Number of threads moderated in current session
  totalThreadsModerated Int          @default(0)      // Total threads moderated across all sessions
  
  metricsHistory    MetricsHistory[]
  moderationHistory ModerationHistory[]

  @@unique([videoId, platform])
  @@map("videos")
}

model MetricsHistory {
  id        String   @id @default(cuid())
  videoId   String
  views     Int
  likes     Int
  comments  Int
  shares    Int
  timestamp DateTime @default(now())
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("metrics_history")
}

model ModerationHistory {
  id                  String   @id @default(cuid())
  videoId             String
  moderatedBy         String   // Who did the moderation
  commentsModerated   Int      @default(0) // Number of comments moderated in this session
  threadsStarted      Int      @default(0) // Number of new threads started in this session
  gotTopComment       Boolean  @default(false) // Whether they got top comment in this session
  notes               String?  // Optional notes about what was done
  timestamp           DateTime @default(now())
  video               Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("moderation_history")
}

model TrackedAccount {
  id              String   @id @default(cuid())
  username        String
  platform        String
  accountType     String   @default("all")
  keyword         String?
  isActive        Boolean  @default(true)
  lastChecked     DateTime @default(now())
  createdAt       DateTime @default(now())
  lastVideoId     String?
  lastPostAdded   DateTime?  // Track when new posts were actually added

  @@unique([username, platform])
  @@map("tracked_accounts")
}
